"vimrc
scriptencoding utf-8
set encoding=utf-8

" load bundled extentions and their setting {{{
"set shell=/bin/sh
language C
set nocompatible | filetype indent plugin on | syn on
let mapleader = "\<Space>"
if !exists('g:vscode')
  execute 'source ' . expand('<sfile>:h') . '/init_bundles.vim'
else
  xmap gc  <Plug>VSCodeCommentary
  nmap gc  <Plug>VSCodeCommentary
  omap gc  <Plug>VSCodeCommentary
  nmap gcc <Plug>VSCodeCommentaryLine
endif
" }}}

" general options {{{
set hidden autoread
set history=1000
set noswapfile nobackup
set writebackup noundofile
runtime macros/matchit.vim
set grepprg=internal
"set grepprg=grep\ -H\ -n\ $*
set pumheight=10
set display=lastline
set autoindent smartindent
set wrap linebreak textwidth=0 colorcolumn=80
set expandtab tabstop=2 shiftwidth=2 softtabstop=2
set backspace=indent,eol,start
set foldmethod=syntax foldlevelstart=9
set hlsearch incsearch magic
set ignorecase smartcase infercase
set virtualedit+=block
set switchbuf=usetab
set shortmess=atIc
set signcolumn=yes
if !has('nvim')
  set clipboard=unnamed,autoselect
  set modeline modelines=2
  set ambiwidth=double
endif
set fileencodings=ucs-bom,utf-8,iso-2022-jp,cp932,euc-jp
set fileformat=unix fileformats=unix,dos,mac
set formatoptions=lmoq
set wildmenu wildmode=list:longest
set wildignore=*.o,*.obj,*.a,*.gif,*.jpg,*.so,*.svn
set showmatch matchtime=1
set showcmd
set cmdheight=2
set diffopt=filler,iwhite
set scrolloff=2
set laststatus=2
set statusline=[%n]%f%m%r%h%w\ [%Y/%{&ff}/%{&fenc}]\ (%l/%L=%p%%,%v)
set virtualedit+=block
set relativenumber number
set list listchars=tab:->,trail:-,extends:>,precedes:<,nbsp:%,eol:<
set directory+=,$TMP

set imsearch=0 iminsert=0
set tags+=../tags,../../tags,../../../tags
set path=.,include,../include,../../include,../../../include,
set ssop-=options
set ssop-=folds
" }}}

" keymaps {{{
" normal keymaps
nnoremap c "_c
nnoremap <Leader>w :wall<CR>
" inc / decl
nnoremap + <c-a>
nnoremap - <c-x>
"nmap : q:
vnoremap <silent> p "zdP
nnoremap ; :
nnoremap ;; ;
if exists('g:vscode')
  " cursor
  nmap j gj
  nmap k gk
  " vscode commands
  nmap <C-r> <Cmd>call VSCodeNotify('workbench.action.openRecent')<CR>
  nmap <Leader><Space> <Cmd>call VSCodeCall('workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup')<CR><CR>
  " panes / tabs
  nmap <Leader>w <Cmd>call VSCodeNotify('workbench.action.files.saveFiles')<CR>
  nmap <Leader>o <Cmd>call VSCodeNotify('workbench.action.compareEditor.focusOtherSide')<CR>
  nmap <Leader><tab> <C-w><C-w>
  nmap <Leader>d <C-w>c
  nmap <Leader>h <C-w>h
  nmap <Leader>j <C-w>j
  nmap <Leader>k <C-w>k
  nmap <Leader>l <C-w>l
  nmap <Leader>b <Cmd>call VSCodeNotify('workbench.action.toggleSidebarVisibility')<CR>
  nmap <C-j> <Cmd>call VSCodeNotify('workbench.action.togglePanel')<CR>
  " only for comapre/diff view
  nmap <Leader>z <Cmd>call VSCodeNotify('workbench.action.compareEditor.focusOtherSide')<CR>
  " folding
  nmap zM <Cmd>call VSCodeNotify('editor.foldAll')<CR>
  nmap zc <Cmd>call VSCodeNotify('editor.fold')<CR>
  nmap zo <Cmd>call VSCodeNotify('editor.unfold')<CR>
  nmap zO <Cmd>call VSCodeNotify('editor.unfoldAll')<CR>
else
  nnoremap <F1> <ESC>
  nnoremap <silent> <C-l> gt
  nnoremap <silent> <C-h> gT
  nnoremap <Leader><space> :e #<CR>
endif

" Commandline keymaps
cnoremap <c-a> <home>
cnoremap <c-e> <end>
cnoremap <c-h> <s-left>
cnoremap <c-l> <s-right>
cnoremap <c-j> <down>
cnoremap <c-k> <up>
" }}}

" autocommands {{{
augroup textfile
  autocmd BufRead *.txt  set ft=asciidoc expandtab
  autocmd BufRead *.md  set ai formatoptions=tcroqn2 comments=n:>
  "autocmd BufRead *htm?  set foldmethod=indent
  "autocmd FocusLost *    up
augroup END

augroup autocommnd
  autocmd CmdwinEnter * call s:init_cmdwin()
augroup END
function! s:init_cmdwin()
  nnoremap <buffer> q :<C-u>quit<CR>
  nnoremap <buffer> <TAB> :<C-u>quit<CR>
  inoremap <buffer><expr><CR> pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
  inoremap <buffer><expr><C-h> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"
  inoremap <buffer><expr><BS> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"
  " Completion.
  inoremap <buffer><expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  startinsert!
endfunction
" }}}

" Makefile {{{
nnoremap <F3>  :up<CR>:make %:r<CR><CR>:cw<CR>
function! Eval_vsplit()
  silent execute ":pedit! output.log"
  wincmd P
  setlocal buftype=nofile
  setlocal noswapfile
  setlocal syntax=none
  setlocal bufhidden=delete
  silent execute ":%!make #:r 2>&1 "
  wincmd p
endfunction 
nnoremap <F7> :up<CR>:call Eval_vsplit()<CR>
" }}}

" Misc {{{
au BufRead,BufNewFile *.scala set filetype=scala
noremap ,c :cscope find  <C-R>=expand("<cword>")<CR><C-Left><Left>
let g:changelog_dateformat="%Y-%m-%d"
let g:changelog_username="tshm <2sm@csc.jp>"
let g:load_doxygen_syntax=1
" }}}

let g:session_directory="~/.vim_session"
" Load vimrc / .session.vim from local folder {{{
" if argc() == 0
"   if filereadable(getcwd() . '/.session.vim')
"     fu! RestoreSession()
"       exec 'source ' . getcwd() . '/.session.vim'
"     endfunction
"     autocmd VimEnter * nested call RestoreSession()
"   endif
"   autocmd VimLeavePre * exec 'mks! ' . getcwd() . '/.session.vim'
" endif
" }}}
let g:syntastic_javascript_checkers = ['eslint']
" vim: foldmethod=marker
