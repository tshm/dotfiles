" vimrc

" load bundled extentions and their setting {{{
"set shell=/bin/sh
language C
set nocompatible | filetype indent plugin on | syn on
let mapleader = "\<Space>"
execute 'source ' . expand('<sfile>:h') . '/init_bundles.vim'
" }}}

" general options {{{
set hidden autoread
set history=1000
set noswapfile nobackup
runtime macros/matchit.vim
set grepprg=internal
"set grepprg=grep\ -H\ -n\ $*
set pumheight=10
set display=lastline
set autoindent smartindent
set wrap linebreak textwidth=0 colorcolumn=80
set expandtab tabstop=2 shiftwidth=2 softtabstop=2
set backspace=indent,eol,start
set foldmethod=syntax foldlevelstart=9
set nobackup writebackup noundofile
set hlsearch incsearch magic
set ignorecase smartcase infercase
set virtualedit+=block
set switchbuf=usetab
set shortmess=atI
set clipboard=unnamed,autoselect
set modeline modelines=2
set ambiwidth=double
set encoding=utf-8 fileencodings=ucs-bom,utf-8,iso-2022-jp,cp932,euc-jp
set fileformat=unix fileformats=unix,dos,mac
set formatoptions=lmoq
set wildmenu wildmode=list:longest wildignore=*.o,*.obj,*.a,*.gif,*.jpg,*.so,*.svn
set showmatch matchtime=1
set showcmd
set diffopt=filler,iwhite
set scrolloff=2
set laststatus=2
set statusline=[%n]%f%m%r%h%w\ [%Y/%{&ff}/%{&fenc}]\ (%l/%L=%p%%,%v)
set virtualedit+=block
set relativenumber number
set list listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:<
set directory+=,$TMP

set imsearch=0 iminsert=0
set tags+=../tags,../../tags,../../../tags
set path=.,include,../include,../../include,../../../include,
set ssop-=options
set ssop-=folds
" }}}

" keymaps {{{
" normal keymaps
nnoremap c "_c
nnoremap <F1> <ESC>
nnoremap <silent> <C-l> gt
nnoremap <silent> <C-h> gT
nnoremap <Leader><space> :e #<CR>
nnoremap <Leader>w :wall<CR>
nnoremap <C-n> :cnext<bar>:cc<bar>:cw<CR>
nnoremap <C-p> :cprev<bar>:cc<bar>:cw<CR>
" inc / decl
nnoremap + <c-a>
nnoremap - <c-x>
"nmap : q:
vnoremap <silent> p "zdP
nnoremap ; :
nnoremap ;; ;

" Commandline keymaps
cnoremap <c-a> <home>
cnoremap <c-e> <end>
cnoremap <c-h> <s-left>
cnoremap <c-l> <s-right>
cnoremap <c-j> <down>
cnoremap <c-k> <up>
" }}}

" autocommands {{{
augroup textfile
  autocmd BufRead *.txt  set ft=asciidoc expandtab
  autocmd BufRead *.md  set ai formatoptions=tcroqn2 comments=n:>
  "autocmd BufRead *htm?  set foldmethod=indent
  "autocmd FocusLost *    up
augroup END

augroup autocommnd
  autocmd CmdwinEnter * call s:init_cmdwin()
augroup END
function! s:init_cmdwin()
  nnoremap <buffer> q :<C-u>quit<CR>
  nnoremap <buffer> <TAB> :<C-u>quit<CR>
  inoremap <buffer><expr><CR> pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
  inoremap <buffer><expr><C-h> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"
  inoremap <buffer><expr><BS> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"
  " Completion.
  inoremap <buffer><expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  startinsert!
endfunction
" }}}

" Makefile {{{
nnoremap <F3>  :up<CR>:make %:r<CR><CR>:cw<CR>
function! Eval_vsplit()
  silent execute ":pedit! output.log"
  wincmd P
  setlocal buftype=nofile
  setlocal noswapfile
  setlocal syntax=none
  setlocal bufhidden=delete
  silent execute ":%!make #:r 2>&1 "
  wincmd p
endfunction 
nnoremap <F7> :up<CR>:call Eval_vsplit()<CR>
" }}}

" Misc {{{
au BufRead,BufNewFile *.scala set filetype=scala
noremap ,c :cscope find  <C-R>=expand("<cword>")<CR><C-Left><Left>
let g:changelog_dateformat="%Y-%m-%d"
let g:changelog_username="tshm <2sm@csc.jp>"
let g:load_doxygen_syntax=1
" }}}

" cscope {{{
"set csto=0
"set nocsverb
" add any database in current directory
"if filereadable("cscope.out")
  "cscope add cscope.out
  "set cst
"endif
"set csverb
"set cscopequickfix=s-,c-,d-,i-,t-,e-
" }}}

" Tab/Space detection {{{
function! AutoTabConfig()
  let [ntab, nspc, shift] = [0,0,4]
  for line in getbufline(winbufnr(0), 1, "$")
    if -1 != match(line, '^\t')
      let ntab += 1
    elseif -1 != match(line, '^ ')
      let nspc += 1
      let spcs = match(line, '[^ ]') / 2 * 2
      if shift > spcs && spcs > 0
        let shift = spcs
      endif
    endif
  endfor
  if l:ntab > l:nspc
    setlocal noexpandtab
  else
    exe "setlocal expandtab tabstop=" . shift . " shiftwidth=" . shift
  endif
endfunction
autocmd BufReadPost * call AutoTabConfig()
" }}}

" Load vimrc / .session.vim from local folder {{{
if argc() == 0
  if filereadable(getcwd() . '/.session.vim')
    fu! RestoreSession()
      exec 'source ' . getcwd() . '/.session.vim'
    endfunction
    autocmd VimEnter * nested call RestoreSession()
  endif
  autocmd VimLeavePre * exec 'mks! ' . getcwd() . '/.session.vim'
endif
" }}}
let g:syntastic_javascript_checkers = ['eslint'] 
" vim: foldmethod=marker
